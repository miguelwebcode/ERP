#!/bin/bash

# Claude Development CLI Script
# Usage: claude-dev <command> <subcommand> [options]

set -e

CLAUDE_DIR=".claude"
AGENTS_DIR="$CLAUDE_DIR/agents"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

log_success() {
    echo -e "${GREEN}✓${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if .claude directory exists
check_claude_setup() {
    if [ ! -d "$CLAUDE_DIR" ]; then
        log_error "Claude agent system not initialized. Run 'claude-init' first."
        exit 1
    fi
}

# Create component
create_component() {
    local component_name="$1"
    local props="$2"
    
    if [ -z "$component_name" ]; then
        log_error "Component name required. Usage: claude-dev create component ComponentName"
        exit 1
    fi
    
    log_info "Creating component: $component_name"
    
    # Invoke component-agent
    cat << EOF | claude-agent-invoke component-agent
{
  "task_id": "create-component-$(date +%s)",
  "action": "create",
  "component_name": "$component_name",
  "requirements": "Create React component with TypeScript",
  "props": $props,
  "features": ["responsive", "accessible"]
}
EOF
    
    log_success "Component $component_name created successfully"
}

# Create API endpoint
create_api() {
    local endpoint="$1"
    local method="${2:-GET}"
    local auth="${3:-true}"
    
    if [ -z "$endpoint" ]; then
        log_error "API endpoint required. Usage: claude-dev create api '/api/v1/endpoint'"
        exit 1
    fi
    
    log_info "Creating API endpoint: $method $endpoint"
    
    # Invoke api-agent
    cat << EOF | claude-agent-invoke api-agent
{
  "task_id": "create-api-$(date +%s)",
  "action": "create",
  "endpoint": "$endpoint",
  "method": "$method",
  "authentication": $auth,
  "requirements": "Create REST API endpoint with validation"
}
EOF
    
    log_success "API endpoint $method $endpoint created successfully"
}

# Create database collection
create_db() {
    local collection="$1"
    local schema="$2"
    
    if [ -z "$collection" ]; then
        log_error "Collection name required. Usage: claude-dev create db collection_name"
        exit 1
    fi
    
    log_info "Creating database collection: $collection"
    
    # Invoke db-agent
    cat << EOF | claude-agent-invoke db-agent
{
  "task_id": "create-db-$(date +%s)",
  "action": "create_collection",
  "collection": "$collection",
  "schema": $schema,
  "access_control": "authenticated"
}
EOF
    
    log_success "Database collection $collection created successfully"
}

# Create feature (full workflow)
create_feature() {
    local feature_name="$1"
    local includes="$2"
    
    if [ -z "$feature_name" ]; then
        log_error "Feature name required. Usage: claude-dev create feature feature_name"
        exit 1
    fi
    
    log_info "Creating feature: $feature_name"
    log_warning "This will trigger multiple agents in sequence..."
    
    # Start with component creation
    create_component "${feature_name}Component" '{}'
    
    # Create API endpoints
    create_api "/api/v1/${feature_name,,}" "GET"
    create_api "/api/v1/${feature_name,,}" "POST"
    
    # Create database collection
    create_db "${feature_name,,}s" '{}'
    
    log_success "Feature $feature_name created successfully"
}

# Main command dispatcher
case "$1" in
    "create")
        check_claude_setup
        case "$2" in
            "component")
                create_component "$3" "${4:-{}}"
                ;;
            "api")
                create_api "$3" "$4" "$5"
                ;;
            "db")
                create_db "$3" "${4:-{}}"
                ;;
            "feature")
                create_feature "$3" "$4"
                ;;
            *)
                echo "Usage: claude-dev create {component|api|db|feature} [args]"
                echo ""
                echo "Examples:"
                echo "  claude-dev create component UserCard"
                echo "  claude-dev create api '/api/v1/users' GET true"
                echo "  claude-dev create db customers"
                echo "  claude-dev create feature user-management"
                exit 1
                ;;
        esac
        ;;
    "modify")
        check_claude_setup
        log_info "Modify operations not yet implemented"
        ;;
    "refactor")
        check_claude_setup
        log_info "Refactor operations not yet implemented"
        ;;
    "help"|"--help"|"-h")
        echo "Claude Development CLI"
        echo ""
        echo "Usage: claude-dev <command> <subcommand> [options]"
        echo ""
        echo "Commands:"
        echo "  create     Create new components, APIs, or features"
        echo "  modify     Modify existing code (coming soon)"
        echo "  refactor   Refactor code (coming soon)"
        echo "  help       Show this help message"
        echo ""
        echo "Create subcommands:"
        echo "  component  Create React component with TypeScript"
        echo "  api        Create Express API endpoint"
        echo "  db         Create database collection"
        echo "  feature    Create complete feature (component + API + DB)"
        echo ""
        echo "Examples:"
        echo "  claude-dev create component UserProfile"
        echo "  claude-dev create api '/api/v1/customers' POST true"
        echo "  claude-dev create feature customer-management"
        ;;
    *)
        log_error "Unknown command: $1"
        echo "Run 'claude-dev help' for usage information"
        exit 1
        ;;
esac