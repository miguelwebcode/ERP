#!/bin/bash

# Claude Deployment CLI Script
# Usage: claude-deploy <command> [environment] [options]

set -e

CLAUDE_DIR=".claude"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

log_success() {
    echo -e "${GREEN}✓${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if .claude directory exists
check_claude_setup() {
    if [ ! -d "$CLAUDE_DIR" ]; then
        log_error "Claude agent system not initialized. Run 'claude-init' first."
        exit 1
    fi
}

# Build application
build_app() {
    local environment="${1:-development}"
    local optimization="${2:-basic}"
    
    log_info "Building application for $environment environment"
    
    # Invoke build-agent
    cat << EOF | claude-agent-invoke build-agent
{
  "task_id": "build-$(date +%s)",
  "build_type": "full",
  "environment": "$environment",
  "optimization_level": "$optimization",
  "include_source_maps": $([ "$environment" != "production" ] && echo "true" || echo "false"),
  "run_tests": true,
  "performance_budget": {
    "max_bundle_size": "500kb"
  }
}
EOF
    
    log_success "Build completed successfully"
}

# Deploy to environment
deploy_to_env() {
    local environment="$1"
    local deployment_type="${2:-full_deploy}"
    local version="$3"
    
    if [ -z "$environment" ]; then
        log_error "Environment required. Usage: claude-deploy deploy {development|staging|production}"
        exit 1
    fi
    
    # Confirmation for production
    if [ "$environment" = "production" ]; then
        log_warning "You are about to deploy to PRODUCTION!"
        read -p "Are you sure? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Production deployment cancelled"
            exit 0
        fi
    fi
    
    log_info "Deploying to $environment environment"
    
    # Build first
    build_app "$environment" "aggressive"
    
    # Invoke deploy-agent
    cat << EOF | claude-agent-invoke deploy-agent
{
  "task_id": "deploy-$(date +%s)",
  "environment": "$environment",
  "deployment_type": "$deployment_type",
  "version_tag": "${version:-"$(git describe --tags --always)"}",
  "migration_required": false,
  "health_check_timeout": 300,
  "rollback_on_failure": true
}
EOF
    
    log_success "Deployment to $environment completed"
}

# Rollback deployment
rollback_deployment() {
    local environment="$1"
    local target_version="${2:-previous}"
    
    if [ -z "$environment" ]; then
        log_error "Environment required. Usage: claude-deploy rollback {staging|production} [version]"
        exit 1
    fi
    
    log_warning "Initiating rollback for $environment environment to $target_version"
    
    # Confirmation for production rollback
    if [ "$environment" = "production" ]; then
        log_warning "You are about to rollback PRODUCTION!"
        read -p "Are you sure? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Production rollback cancelled"
            exit 0
        fi
    fi
    
    # Invoke rollback-agent
    cat << EOF | claude-agent-invoke rollback-agent
{
  "task_id": "rollback-$(date +%s)",
  "rollback_trigger": "manual",
  "target_version": "$target_version",
  "environment": "$environment",
  "services_to_rollback": ["hosting", "functions"],
  "database_rollback": false,
  "notification_required": true
}
EOF
    
    log_success "Rollback completed"
}

# Release management
create_release() {
    local version="$1"
    local description="$2"
    
    if [ -z "$version" ]; then
        log_error "Version required. Usage: claude-deploy release v1.2.0 'Release description'"
        exit 1
    fi
    
    log_info "Creating release $version"
    
    # Run full test suite first
    log_info "Running pre-release tests..."
    claude-test all
    
    # Build for production
    build_app "production" "aggressive"
    
    # Create git tag
    git tag -a "$version" -m "${description:-"Release $version"}"
    
    # Deploy to staging first
    log_info "Deploying to staging for validation..."
    deploy_to_env "staging" "full_deploy" "$version"
    
    log_info "Staging deployment complete. Ready for production."
    log_warning "Run 'claude-deploy deploy production' when ready to go live."
    
    log_success "Release $version prepared successfully"
}

# Health check
health_check() {
    local environment="${1:-staging}"
    
    log_info "Running health check for $environment environment"
    
    # Check application endpoints
    case "$environment" in
        "development")
            base_url="http://localhost:5173"
            ;;
        "staging")
            base_url="https://erp-staging.web.app"
            ;;
        "production")
            base_url="https://erp-prod.web.app"
            ;;
    esac
    
    # Basic health check
    if curl -f -s "$base_url" > /dev/null; then
        log_success "Application is responding"
    else
        log_error "Application health check failed"
        exit 1
    fi
    
    # Check API endpoints
    if curl -f -s "$base_url/api/v1/health" > /dev/null; then
        log_success "API is responding"
    else
        log_warning "API health check failed or not available"
    fi
    
    log_success "Health check completed"
}

# Main command dispatcher
case "$1" in
    "build")
        check_claude_setup
        build_app "$2" "$3"
        ;;
    "deploy")
        check_claude_setup
        deploy_to_env "$2" "$3" "$4"
        ;;
    "rollback")
        check_claude_setup
        rollback_deployment "$2" "$3"
        ;;
    "release")
        check_claude_setup
        create_release "$2" "$3"
        ;;
    "health")
        health_check "$2"
        ;;
    "help"|"--help"|"-h")
        echo "Claude Deployment CLI"
        echo ""
        echo "Usage: claude-deploy <command> [options]"
        echo ""
        echo "Commands:"
        echo "  build      Build application for specified environment"
        echo "  deploy     Deploy to specified environment"
        echo "  rollback   Rollback deployment to previous version"
        echo "  release    Create and prepare a new release"
        echo "  health     Check application health"
        echo ""
        echo "Examples:"
        echo "  claude-deploy build staging"
        echo "  claude-deploy deploy production"
        echo "  claude-deploy rollback production v1.1.0"
        echo "  claude-deploy release v1.2.0 'New features and bug fixes'"
        echo "  claude-deploy health staging"
        ;;
    *)
        log_error "Unknown command: $1"
        echo "Run 'claude-deploy help' for usage information"
        exit 1
        ;;
esac