#!/bin/bash

# Claude Testing CLI Script
# Usage: claude-test <test_type> [options]

set -e

CLAUDE_DIR=".claude"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

log_success() {
    echo -e "${GREEN}✓${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if .claude directory exists
check_claude_setup() {
    if [ ! -d "$CLAUDE_DIR" ]; then
        log_error "Claude agent system not initialized. Run 'claude-init' first."
        exit 1
    fi
}

# Run unit tests
run_unit_tests() {
    local target="$1"
    local coverage="${2:-80}"
    
    log_info "Running unit tests for: ${target:-'all modules'}"
    
    # Invoke unit-test-agent
    cat << EOF | claude-agent-invoke unit-test-agent
{
  "task_id": "unit-test-$(date +%s)",
  "target_files": ["${target:-"./client/src"}"],
  "test_type": "utility",
  "coverage_requirement": $coverage,
  "test_scenarios": [
    "happy path scenarios",
    "edge cases",
    "error handling"
  ]
}
EOF
    
    log_success "Unit tests completed"
}

# Run component tests
run_component_tests() {
    local component="$1"
    
    if [ -z "$component" ]; then
        log_error "Component name required. Usage: claude-test component ComponentName"
        exit 1
    fi
    
    log_info "Running component tests for: $component"
    
    # Invoke component-test-agent
    cat << EOF | claude-agent-invoke component-test-agent
{
  "task_id": "component-test-$(date +%s)",
  "component_name": "$component",
  "component_path": "./client/src/components/$component/$component.tsx",
  "test_scenarios": [
    "renders_correctly",
    "user_interactions",
    "accessibility",
    "props_handling"
  ]
}
EOF
    
    log_success "Component tests for $component completed"
}

# Run E2E tests
run_e2e_tests() {
    local workflow="$1"
    
    log_info "Running E2E tests for: ${workflow:-'all workflows'}"
    
    # Start Firebase emulators if not running
    if ! pgrep -f "firebase emulators:start" > /dev/null; then
        log_info "Starting Firebase emulators..."
        npm run emulators &
        sleep 10
    fi
    
    # Invoke e2e-test-agent
    cat << EOF | claude-agent-invoke e2e-test-agent
{
  "task_id": "e2e-test-$(date +%s)",
  "test_name": "${workflow:-full_application_test}",
  "user_journey": [
    {"step": "1", "action": "Navigate to login", "expected_result": "Login form visible"},
    {"step": "2", "action": "Login with test user", "expected_result": "Dashboard loaded"},
    {"step": "3", "action": "Navigate to main feature", "expected_result": "Feature accessible"}
  ],
  "test_type": "${workflow:-navigation}",
  "authentication_required": true
}
EOF
    
    log_success "E2E tests completed"
}

# Run snapshot tests
run_snapshot_tests() {
    local component="$1"
    
    log_info "Running snapshot tests for: ${component:-'all components'}"
    
    # Invoke snapshot-agent
    cat << EOF | claude-agent-invoke snapshot-agent
{
  "task_id": "snapshot-test-$(date +%s)",
  "component_name": "${component:-"AllComponents"}",
  "snapshot_type": "both",
  "viewport_sizes": [320, 768, 1024],
  "interaction_states": ["default", "hover", "focus"]
}
EOF
    
    log_success "Snapshot tests completed"
}

# Run coverage report
run_coverage() {
    local threshold="${1:-80}"
    
    log_info "Generating test coverage report (threshold: $threshold%)"
    
    # Run all test types and generate combined report
    npm run vitest -- --coverage --reporter=html
    
    log_success "Coverage report generated in coverage/"
}

# Run full test suite
run_full_suite() {
    log_info "Running full test suite..."
    
    log_info "Step 1/4: Unit tests"
    run_unit_tests
    
    log_info "Step 2/4: Component tests"
    # Find all components and test them
    find ./client/src/components -name "*.tsx" -type f | while read component_file; do
        component_name=$(basename "$component_file" .tsx)
        run_component_tests "$component_name"
    done
    
    log_info "Step 3/4: E2E tests"
    run_e2e_tests
    
    log_info "Step 4/4: Snapshot tests"
    run_snapshot_tests
    
    log_success "Full test suite completed successfully"
}

# Main command dispatcher
case "$1" in
    "unit")
        check_claude_setup
        run_unit_tests "$2" "$3"
        ;;
    "component")
        check_claude_setup
        run_component_tests "$2"
        ;;
    "e2e")
        check_claude_setup
        run_e2e_tests "$2"
        ;;
    "snapshot")
        check_claude_setup
        run_snapshot_tests "$2"
        ;;
    "coverage")
        check_claude_setup
        run_coverage "$2"
        ;;
    "all")
        check_claude_setup
        run_full_suite
        ;;
    "help"|"--help"|"-h")
        echo "Claude Testing CLI"
        echo ""
        echo "Usage: claude-test <test_type> [options]"
        echo ""
        echo "Test Types:"
        echo "  unit       Run unit tests for utilities and functions"
        echo "  component  Run React component tests with RTL"
        echo "  e2e        Run end-to-end tests with Cypress"
        echo "  snapshot   Run visual regression tests"
        echo "  coverage   Generate test coverage report"
        echo "  all        Run complete test suite"
        echo ""
        echo "Examples:"
        echo "  claude-test unit ./src/utils"
        echo "  claude-test component UserCard"
        echo "  claude-test e2e user-login-flow"
        echo "  claude-test snapshot UserProfile"
        echo "  claude-test coverage 90"
        echo "  claude-test all"
        ;;
    *)
        log_error "Unknown test type: $1"
        echo "Run 'claude-test help' for usage information"
        exit 1
        ;;
esac