#!/bin/bash

# Claude Agent System Initialization Script
# Usage: claude-init

set -e

CLAUDE_DIR=".claude"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

log_success() {
    echo -e "${GREEN}✓${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1"
}

log_header() {
    echo -e "${PURPLE}$1${NC}"
}

# Check if already initialized
if [ -d "$CLAUDE_DIR" ]; then
    log_warning "Claude agent system already initialized"
    read -p "Reinitialize? This will overwrite existing configuration (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Initialization cancelled"
        exit 0
    fi
    rm -rf "$CLAUDE_DIR"
fi

# Welcome message
log_header "═══════════════════════════════════════════════"
log_header "  Claude Agent System Initialization"
log_header "═══════════════════════════════════════════════"
echo ""

log_info "Setting up Claude agent system for ERP project..."
echo ""

# Environment checks
log_header "ENVIRONMENT VERIFICATION"
echo ""

# Node.js check
if command -v node >/dev/null 2>&1; then
    node_version=$(node --version)
    log_success "Node.js version: $node_version"
else
    log_error "Node.js not found. Please install Node.js 18+"
    exit 1
fi

# npm check
if command -v npm >/dev/null 2>&1; then
    npm_version=$(npm --version)
    log_success "npm version: $npm_version"
else
    log_error "npm not found. Please install npm"
    exit 1
fi

# Firebase CLI check
if command -v firebase >/dev/null 2>&1; then
    firebase_version=$(firebase --version | head -n1)
    log_success "Firebase CLI: $firebase_version"
else
    log_warning "Firebase CLI not found. Install with: npm install -g firebase-tools"
fi

# Git check
if command -v git >/dev/null 2>&1; then
    git_version=$(git --version)
    log_success "$git_version"
else
    log_error "Git not found. Please install Git"
    exit 1
fi

echo ""

# Project structure analysis
log_header "PROJECT STRUCTURE ANALYSIS"
echo ""

# Check for package.json
if [ -f "package.json" ]; then
    log_success "package.json found"
else
    log_warning "package.json not found in root directory"
fi

# Check for TypeScript
if [ -f "tsconfig.json" ] || [ -f "client/tsconfig.json" ]; then
    log_success "TypeScript configuration found"
else
    log_warning "TypeScript configuration not found"
fi

# Check for React
if grep -q "react" package.json 2>/dev/null || grep -q "react" client/package.json 2>/dev/null; then
    log_success "React framework detected"
else
    log_warning "React framework not detected"
fi

# Check for Firebase config
if [ -f "firebase.json" ]; then
    log_success "Firebase configuration found"
else
    log_warning "Firebase configuration not found"
fi

echo ""

# Create directory structure
log_header "CREATING DIRECTORY STRUCTURE"
echo ""

directories=(
    "$CLAUDE_DIR"
    "$CLAUDE_DIR/agents"
    "$CLAUDE_DIR/agents/dev"
    "$CLAUDE_DIR/agents/test"
    "$CLAUDE_DIR/agents/qa"
    "$CLAUDE_DIR/agents/deploy"
    "$CLAUDE_DIR/agents/docs"
    "$CLAUDE_DIR/templates"
    "$CLAUDE_DIR/schemas"
    "$CLAUDE_DIR/scripts"
    "$CLAUDE_DIR/logs"
)

for dir in "${directories[@]}"; do
    mkdir -p "$dir"
    log_success "Created directory: $dir"
done

echo ""

# Make scripts executable
log_header "SETTING UP CLI SCRIPTS"
echo ""

chmod +x "$CLAUDE_DIR/scripts/"*
log_success "Made CLI scripts executable"

# Add to PATH suggestion
if ! echo "$PATH" | grep -q "$PWD/$CLAUDE_DIR/scripts"; then
    log_info "To use claude-* commands globally, add this to your ~/.bashrc or ~/.zshrc:"
    echo "export PATH=\"\$PATH:$PWD/$CLAUDE_DIR/scripts\""
fi

echo ""

# Agent system status
log_header "AGENT SYSTEM STATUS"
echo ""

agents=(
    "code-gen-agent:General code generation"
    "component-agent:React component creation"
    "api-agent:REST API endpoint creation"
    "db-agent:Database schema management"
    "unit-test-agent:Unit testing with Vitest"
    "component-test-agent:Component testing with RTL"
    "e2e-test-agent:End-to-end testing with Cypress"
    "snapshot-agent:Visual regression testing"
    "lint-agent:Code quality and formatting"
    "security-agent:Security scanning and auditing"
    "perf-agent:Performance analysis"
    "build-agent:Build optimization"
    "deploy-agent:Deployment management"
    "rollback-agent:Rollback and recovery"
    "doc-gen-agent:Documentation generation"
    "readme-agent:README maintenance"
    "api-spec-agent:API documentation"
)

log_info "Available agents:"
for agent in "${agents[@]}"; do
    name=$(echo "$agent" | cut -d':' -f1)
    description=$(echo "$agent" | cut -d':' -f2)
    echo "  • $name - $description"
done

echo ""

# Configuration
log_header "CONFIGURATION"
echo ""

# Create main configuration file
cat > "$CLAUDE_DIR/claude.md" << 'EOF'
# Claude Agent System - ERP Project

## Project Configuration

- **Framework:** React + TypeScript + Firebase
- **Package Manager:** npm
- **Testing:** Vitest + Cypress
- **Deployment:** Firebase Hosting + Functions

## Agent Teams

### Development Agents
- `code-gen-agent` - Utility functions and helpers
- `component-agent` - React components with TypeScript  
- `api-agent` - Express API endpoints
- `db-agent` - Firestore collections and security rules

### Testing Agents
- `unit-test-agent` - Vitest unit tests
- `component-test-agent` - React Testing Library
- `e2e-test-agent` - Cypress end-to-end tests
- `snapshot-agent` - Visual regression tests

### Quality Agents
- `lint-agent` - ESLint and Prettier
- `security-agent` - Vulnerability scanning
- `perf-agent` - Performance optimization

### Deployment Agents
- `build-agent` - Build optimization
- `deploy-agent` - Firebase deployment
- `rollback-agent` - Emergency rollbacks

### Documentation Agents
- `doc-gen-agent` - JSDoc generation
- `readme-agent` - README updates
- `api-spec-agent` - OpenAPI specs

## Usage

```bash
# Development
claude-dev create component UserCard
claude-dev create api '/api/v1/users'
claude-dev create feature customer-management

# Testing
claude-test unit ./src/utils
claude-test component UserCard
claude-test e2e user-login

# Deployment
claude-deploy build staging
claude-deploy deploy production
claude-deploy rollback production

# Quality Assurance
claude-qa lint --fix
claude-qa security --audit
claude-qa performance --optimize
```

## Environment Setup

Run `claude-init` to initialize the system in any repository.
EOF

log_success "Created main configuration: $CLAUDE_DIR/claude.md"

echo ""

# Final setup
log_header "FINALIZATION"
echo ""

# Create .gitignore entry for logs
if [ -f ".gitignore" ]; then
    if ! grep -q ".claude/logs" .gitignore; then
        echo ".claude/logs/" >> .gitignore
        log_success "Added .claude/logs/ to .gitignore"
    fi
else
    echo ".claude/logs/" > .gitignore
    log_success "Created .gitignore with .claude/logs/"
fi

# Success message
echo ""
log_header "═══════════════════════════════════════════════"
log_header "  Claude Agent System Ready! 🚀"
log_header "═══════════════════════════════════════════════"
echo ""

log_success "Agent system initialized successfully!"
echo ""
log_info "Next steps:"
echo "1. Add $PWD/$CLAUDE_DIR/scripts to your PATH"
echo "2. Run 'claude-dev help' to see available commands"
echo "3. Try 'claude-dev create component TestComponent' to test"
echo "4. Check the documentation in .claude/claude.md"
echo ""
log_info "Example commands to get started:"
echo "  claude-dev create component UserProfile"
echo "  claude-test unit ./src/utils"
echo "  claude-deploy build development"
echo ""

log_warning "Note: Individual agent implementations may need additional setup"
log_warning "Refer to .claude/agents/ for specific agent configurations"

echo ""
log_success "Happy coding with Claude! 🎉"